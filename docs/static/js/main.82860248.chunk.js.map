{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItems.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItems","className","src","alt","GifGrid","category","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yLAuCeA,EAnCY,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,qBAFQ,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,mCACA,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,e,+BCPjBG,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,4DACL,mCACTC,EAFc,iDAEkCC,UAAWR,GAF7C,6BACL,oCADK,SAGDS,MAAOF,GAHN,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVtB,kBAcbM,GAda,4CAAH,sDCCRO,G,MAAe,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IACvC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,YCHCO,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EACZjC,mBAAS,CAC/BoB,KAAM,GACNc,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAatC,OAPAC,qBAAU,WACNxB,EAAQoB,GAAUK,MAAM,SAAAf,GAAQa,EAAS,CACrChB,KAAMG,EACNW,SAAS,SAEd,CAAED,IAEEE,EDV2BI,CAAaN,GAAjCP,EAHuB,EAG7BN,KAAcc,EAHe,EAGfA,QAEtB,OACI,qCACI,mCAAOD,EAAP,OAEEC,GAAW,wCAEb,qBAAKL,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEKA,GADCA,EAAIC,aEWnBgB,EA1Ba,WAAO,IAAD,EAEMxC,mBAAS,IAFf,mBAEvBQ,EAFuB,KAEXT,EAFW,KAI9B,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQS,EAAWc,KAAK,SAAAW,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YCNnBQ,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBL,MAAK,YAAkD,IAA/CM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.82860248.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState()\n    \n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ) {\n            setCategories(categories => [inputValue, ...categories ]);\n            setInputValue('');\n        }\n\n    }\n\n    return (\n        <>\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n        </>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","\n\n export const getGifs = async( categories ) => {\n    const apiKey = 'aWLSTUk026P4PrWuKMAwcA0zUCZmakcx';\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( categories )}&limit=10&api_key=${apiKey}`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\nimport 'animate.css';\n\nexport const GifGridItems = ( { id, title, url } ) => {\n    return (\n        <div className='card animate__animated animate__fadeInDown'>\n            <img src={ url } alt= {title} />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItems } from './GifGridItems';\n\nexport const GifGrid = ({ category }) => {\n\n    // const [images, setImages] = useState([])\n    const { data: images ,loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3> { category } </h3>  \n\n            { loading && <p>Loading</p> }\n\n            <div className='card-grid'>\n                {\n                    images.map( img => (\n                        <GifGridItems \n                        key={ img.id }\n                        { ...img } \n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = (category) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then( img => {setstate({\n            data: img,\n            loading: false\n        })} )\n    }, [ category ]);\n\n    return state; \n}","import React, {useState} from 'react';\nimport AddCategory from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState([])\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n            <ol>\n                {\n                    categories.map( category => \n                        <GifGrid \n                            key={ category }\n                            category={ category }\n                        />\n                    )\n                }\n            </ol>\n            \n\n        </>\n    );\n}\n\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}